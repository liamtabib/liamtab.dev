---
import "../styles/global.css";
import "@fontsource/inter/latin-400.css";
import "@fontsource/inter/latin-600.css";
import "@fontsource/lora/400.css";
import "@fontsource/lora/600.css";
import inter400 from "@fontsource/inter/files/inter-latin-400-normal.woff2";
import inter600 from "@fontsource/inter/files/inter-latin-600-normal.woff2";
import lora400 from "@fontsource/lora/files/lora-latin-400-normal.woff2";
import lora600 from "@fontsource/lora/files/lora-latin-600-normal.woff2";

import { ClientRouter } from "astro:transitions";
import { SITE } from "@consts";

interface Props {
  title: string;
  description: string;
  image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = "/nano.png" } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon-dark.svg" media="(prefers-color-scheme: dark)">
<link rel="icon" type="image/svg+xml" href="/favicon-light.svg" media="(prefers-color-scheme: light)">
<link rel="icon" type="image/x-icon" href="/favicon-light.svg">
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link rel="preload" href={inter400} as="font" type="font/woff2" crossorigin/>
<link rel="preload" href={inter600} as="font" type="font/woff2" crossorigin/>
<link rel="preload" href={lora400} as="font" type="font/woff2" crossorigin/>
<link rel="preload" href={lora600} as="font" type="font/woff2" crossorigin/>

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<ClientRouter  />

<!-- RSS Link -->
<link rel="alternate" type="application/rss+xml" title={SITE.NAME} href={new URL("rss.xml", Astro.site)} />

<script>
  import type { TransitionBeforeSwapEvent } from "astro:transitions/client";
  document.addEventListener("astro:before-swap", (e) =>
    [
      ...(e as TransitionBeforeSwapEvent).newDocument.head.querySelectorAll(
        "link[as=\"font\"]"
      ),
    ].forEach((link) => link.remove())
  );
</script>

<script is:inline>
  function init() {
    preloadTheme();
    onScroll();
    animate();
    initEyeTracking();

    const backToTop = document.getElementById("back-to-top");
    backToTop?.addEventListener("click", (event) => scrollToTop(event));

    const backToPrev = document.getElementById("back-to-prev");
    backToPrev?.addEventListener("click", () => window.history.back());

    const themeToggle = document.getElementById("theme-toggle");
    themeToggle?.addEventListener("click", () => {
      const isDark = document.documentElement.classList.contains("dark");
      const newTheme = isDark ? "light" : "dark";
      localStorage.setItem("theme", newTheme);
      toggleTheme(!isDark);
    });

    window.matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", event => {
        if (localStorage.theme === "system" || !localStorage.theme) {
          toggleTheme(event.matches);
        }
      }
    );

    document.addEventListener("scroll", onScroll);
  }

  function animate() {
    const animateElements = document.querySelectorAll(".animate");

    animateElements.forEach((element, index) => {
      setTimeout(() => {
        element.classList.add("show");
      }, index * 150);
    });
  }

  function onScroll() {
    if (window.scrollY > 0) {
      document.documentElement.classList.add("scrolled");
    } else {
      document.documentElement.classList.remove("scrolled");
    }
  }

  function scrollToTop(event) {
    event.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: "smooth"
    });
  }

function toggleTheme(dark) {
    const css = document.createElement("style");

    css.appendChild(
      document.createTextNode(
        `* {
             -webkit-transition: none !important;
             -moz-transition: none !important;
             -o-transition: none !important;
             -ms-transition: none !important;
             transition: none !important;
          }
        `,
      )
    );

    document.head.appendChild(css);

    if (dark) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }

  window.getComputedStyle(css).opacity;
    document.head.removeChild(css);
  }

  function preloadTheme() {
    const userTheme = localStorage.theme;

    if (userTheme === "light" || userTheme === "dark") {
      toggleTheme(userTheme === "dark");
    } else {
      toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);
    }
  }

  function initEyeTracking() {
    const leftEye = document.getElementById("left-eye");
    const rightEye = document.getElementById("right-eye");
    const head = document.getElementById("head");
    const leftEar = document.getElementById("left-ear");
    const rightEar = document.getElementById("right-ear");
    const brand = document.getElementById("brand");

    if (!leftEye || !rightEye || !head || !leftEar || !rightEar || !brand) return;

    let isBlinking = false;
    let blinkTimeout = null;
    
    // Initial positions
    const initialPositions = {
      head: { x: 90.5, y: 111.5 },
      leftEye: { x: 77.5, y: 112 },
      rightEye: { x: 103.5, y: 112 },
      leftEar: { x: 60 },
      rightEar: { x: 120 }
    };

    function handleMove(clientX, clientY) {
      const rect = brand.getBoundingClientRect();
      const svgCenterX = rect.left + rect.width / 2;
      const svgCenterY = rect.top + rect.height / 2;
      const offsetX = clientX - svgCenterX;
      const offsetY = clientY - svgCenterY;

      // head
      const maxHeadOffset = 6;
      const headDistance = Math.sqrt(offsetX * offsetX + offsetY * offsetY);
      const clampedHeadDistance = Math.min(headDistance, maxHeadOffset);
      const headAngle = Math.atan2(offsetY, offsetX);
      const headMoveX = clampedHeadDistance * Math.cos(headAngle);
      const headMoveY = clampedHeadDistance * Math.sin(headAngle);

      // eyes
      const maxEyesOffset = 20;
      const eyesDistance = headDistance;
      const eyesAngle = headAngle;
      const clampedEyesDistance = Math.min(eyesDistance, maxEyesOffset);
      const eyeMoveX = clampedEyesDistance * Math.cos(eyesAngle);
      const eyeMoveY = clampedEyesDistance * Math.sin(eyesAngle);

      // ears
      const earMoveFactor = 0.5;
      const earMoveX = headMoveX * earMoveFactor;

      // Update positions
      const newHeadX = initialPositions.head.x + headMoveX;
      const newHeadY = initialPositions.head.y + headMoveY;
      const newLeftEyeX = initialPositions.leftEye.x + eyeMoveX;
      const newLeftEyeY = initialPositions.leftEye.y + eyeMoveY;
      const newRightEyeX = initialPositions.rightEye.x + eyeMoveX;
      const newRightEyeY = initialPositions.rightEye.y + eyeMoveY;
      const newLeftEarX = initialPositions.leftEar.x - earMoveX;
      const newRightEarX = initialPositions.rightEar.x - earMoveX;

      // Apply transformations
      head.setAttribute("cx", newHeadX);
      head.setAttribute("cy", newHeadY);
      leftEye.setAttribute("cx", newLeftEyeX);
      leftEye.setAttribute("cy", newLeftEyeY);
      rightEye.setAttribute("cx", newRightEyeX);
      rightEye.setAttribute("cy", newRightEyeY);
      
      // Update ear paths
      leftEar.setAttribute("d", `M17 180L${newLeftEarX} 34L127 180H17Z`);
      rightEar.setAttribute("d", `M163 180L${newRightEarX} 34L53 180H163Z`);
    }

    function handleMouseMove(event) {
      handleMove(event.clientX, event.clientY);
    }

    function handleTouchMove(event) {
      if (event.touches.length > 0) {
        const touch = event.touches[0];
        handleMove(touch.clientX, touch.clientY);
      }
    }

    // Random blinking
    function scheduleBlink() {
      const nextBlinkInterval = Math.random() * 3000 + 2000; // 2-5 seconds
      blinkTimeout = setTimeout(() => {
        isBlinking = true;
        leftEye.setAttribute("ry", "0");
        rightEye.setAttribute("ry", "0");
        
        setTimeout(() => {
          isBlinking = false;
          leftEye.setAttribute("ry", "15");
          rightEye.setAttribute("ry", "15");
        }, 200);
        
        scheduleBlink();
      }, nextBlinkInterval);
    }

    // Start event listeners
    document.addEventListener("mousemove", handleMouseMove);
    document.addEventListener("touchmove", handleTouchMove);
    
    // Start blinking
    scheduleBlink();

    // Cleanup function (though not used in this context)
    return () => {
      document.removeEventListener("mousemove", handleMouseMove);
      document.removeEventListener("touchmove", handleTouchMove);
      if (blinkTimeout) {
        clearTimeout(blinkTimeout);
      }
    };
  }

  document.addEventListener("DOMContentLoaded", () => init());
  document.addEventListener("astro:after-swap", () => init());
  preloadTheme();
</script>
